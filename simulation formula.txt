Perfect ‚Äî let‚Äôs break this down **completely and clearly**. I‚Äôll map **each formula to the stats it uses**, explain what it does, and then explain **how the race metrics (position, lap time, best lap, gap, status)** are calculated and displayed in your game.

---

# üèÅ Formulas & Stats Mapping

### 1Ô∏è‚É£ **Driver Performance Formula**

$$
DriverPerformance = 0.25 \cdot Cornering + 0.15 \cdot Aggression + 0.20 \cdot Composure
$$

* **Stats used:**

  * Cornering ‚Üí determines speed in turns.
  * Aggression ‚Üí adds slight speed but increases risk.
  * Composure ‚Üí improves consistency.

* **What it does:**

  * Calculates **driver‚Äôs contribution to lap speed**.
  * Higher value = faster lap potential.
  * No RNG here; deterministic.

---

### 2Ô∏è‚É£ **Car Performance Formula**

$$
CarPerformance = 0.25 \cdot Speed + 0.20 \cdot Acceleration + 0.15 \cdot Braking + 0.15 \cdot Aerodynamics + 0.15 \cdot Grip
$$

* **Stats used:**

  * Speed ‚Üí top speed.
  * Acceleration ‚Üí time to reach top speed.
  * Braking ‚Üí reduces time in corners.
  * Aerodynamics ‚Üí affects straight-line efficiency.
  * Grip ‚Üí cornering stability.

* **What it does:**

  * Calculates **car‚Äôs contribution to lap speed**.
  * Higher value ‚Üí faster lap time.
  * Deterministic.

---

### 3Ô∏è‚É£ **Fuel Penalty**

$$
FuelPenalty = FuelWeight \times (1 - FuelEff / 200)
$$

* **Stats used:** FuelEff.
* **What it does:**

  * Slows car based on fuel load.
  * High FuelEff reduces penalty.
  * Deterministic.

---

### 4Ô∏è‚É£ **Tire Penalty**

$$
TirePenalty = (100 - TireWear\%) \times (1 - Grip/200)
$$

* **Stats used:** Grip.
* **What it does:**

  * Degrades speed as tires wear.
  * High Grip cars handle worn tires better.
  * Deterministic.

---

### 5Ô∏è‚É£ **Durability / Condition Penalty**

$$
DurabilityPenalty = (100 - Condition\%) \times (1 - Durability/200)
$$

* **Stats used:** Durability, Condition%
* **What it does:**

  * Reflects slower laps due to car wear and risk of mechanical issues.
  * Deterministic.

---

### 6Ô∏è‚É£ **Lap Randomness (Optional Drama)**

$$
LapRNG = Random(-1, 1) \times (1 - Composure/100)
$$

* **Stats used:** Composure
* **What it does:**

  * Adds **small random fluctuations per lap**.
  * Lower composure ‚Üí higher variation ‚Üí unpredictable moments.

---

### 7Ô∏è‚É£ **Total Lap Time (Emergent)**

$$
LapTime = BLT - DriverPerformance - CarPerformance + FuelPenalty + TirePenalty + DurabilityPenalty + LapRNG
$$

* **All stats contribute indirectly.**
* **What it does:**

  * Calculates **effective lap time**.
  * This is used to accumulate **distance per tick** in the simulation loop.
  * Lap times emerge from **tick-based distance updates**, not pre-calculated.

---

### 8Ô∏è‚É£ **Overtake Formula**

$$
OvertakeScore = (Attacker.Overtaking - Defender.Defending) + \frac{Attacker.Aggression}{5} + Random(-5, 5)
$$

* **Stats used:** Overtaking, Defending, Aggression
* **What it does:**

  * Determines if a car close behind can **overtake the one in front**.
  * Random(-5,5) adds drama.
  * Checked **only when cars are within \~0.5s gap**.

---

### 9Ô∏è‚É£ **Crash Chance**

$$
CrashChance = \frac{(Aggression - 50) \cdot (100 - Composure)}{5000} \times Random(0.5,1.5)
$$

* **Stats used:** Aggression, Composure
* **What it does:**

  * Small probability per tick/lap to **retire due to crash**.

---

### üîü **Mechanical Failure Chance**

$$
FailureChance = \frac{(100 - Durability) \cdot (100 - Condition\%)}{10000} \times Random(0.5,1.5)
$$

* **Stats used:** Durability, Condition%
* **What it does:**

  * Small probability per tick/lap to **retire due to mechanical failure**.

---

### 1Ô∏è‚É£1Ô∏è‚É£ **Tire Blowout Chance**

$$
BlowoutChance = \frac{\max(0, TireWear\%-100)}{1000} \times Random(0.5,1.5)
$$

* **Stats used:** TireWear
* **What it does:**

  * Chance to retire if tires exceed 100% wear.

---

# üèÅ How Race Metrics Are Determined & Shown

| Metric                        | How Calculated                                                            | Display                                |
| ----------------------------- | ------------------------------------------------------------------------- | -------------------------------------- |
| **Position**                  | Sort all drivers by `distanceTraveled` per tick. Swap if overtakes occur. | 1st, 2nd, 3rd‚Ä¶ live updates each tick. |
| **Lap Time**                  | Accumulate `Œît` per lap for each driver. Reset at lap end.                | Shown lap-by-lap.                      |
| **Best Lap Time**             | Keep track of the **lowest lapTime** achieved by driver.                  | Display as ‚ÄúBest Lap‚Äù on UI.           |
| **Gap to Leader / Car Ahead** | `distanceTraveled` difference converted to time using **current speed**.  | "+1.2s", "-0.8s" live.                 |
| **Status**                    | Based on raceState:                                                       |                                        |

* "Racing" ‚Üí active
* "Finished" ‚Üí completed all laps
* "Retired" ‚Üí DNF from crash/mechanical/tire | Show as colored badges/icons. |

---

‚úÖ **Key Flow**

1. **Per tick**:

   * Check DNF (Crash, Failure, Tire)
   * Update effective speed (Driver+Car stats - penalties + LapRNG)
   * Update `distanceTraveled`
   * Check overtakes if cars are close
   * Sort positions
   * Update gaps

2. **Per lap**:

   * Record lap time
   * Update best lap if necessary
   * Reduce fuel, tire wear

3. **End of race**:

   * Sort by laps completed & total distance/time
   * Display positions, gaps, lap times, best lap, status

---

